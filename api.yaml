openapi : "3.0.0"
info:
  title: CONTACT API
  version: 1.0.0
  description: An API that allows users to obtain information on all the contacts or a particular contact and also post information of a new contact
  termsOfService: https://smartbear.com/terms-of-use
  contact:
    name: Kongnyuy
    url: siddy.com
    email: kongnyuyversi24@gmail.com
  license: 
    name: ContactAPI License
    url: https://licence.foo.com

servers:
  - url: http://localhost:5005/api

tags: 
  - name: Contact Management
    description: Endpoints to manage contacts
  - name: User Management
    description: Endpoints to manage registered users
  - name: TODO List
    description: Endpoints to manage the TODO List
  - name: Image
    description: Endpoints to manage Images
  - name: NoteBook
    description: Endpoints to notebooks
        
 
# schemes: [http, https]


paths: 
  /api/contacts: # defining the 1st resource which is the contacts resource
    get: #defining the get endpoint
      description: This endpoint returns information about all the contacts from the ContactAPI database
      tags:
        - Contact Management
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful GET request
  
  /api/contacts/create:
    post:
      description: This endpoint creates a new contact in to the contact database
      tags:
        - Contact Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        201:
          description: Created Successfully
        400:  
          description: Bad request

  /api/contacts/delete/{id}:
    delete:
      description: This endpoint permit the deletion
      tags:
        - Contact Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          format: ObjectId
          schema:
            type: string
      responses:
        200:
          description: deleted successfully
        400:
          description: Bad request

  /api/contacts/update/{id}:
    put:
      description: This endpoints permits the user to update information on a particular contact using the id
      tags:
        - Contact Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: Id
          required: true
          format: objectId
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        200:
          description: Updated successfully
        400:
          description: Bad request Failed to update
  /api/contacts/search:
    get:
      description: This endpoint permits the user to search for a contact
      tags:
        - Contact Management
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: searchTerm
          required: true
          schema:
            type: string
      responses:
        200:
          description: These are the contacts that match your search
        401:
          description: No Contact(s) found 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  securitySchemes:
    bearerAuth:
          type: http
          scheme: bearer
          in: header
  schemas:
    User:
      properties:
        userName:
          type: string
        userEmail:
          type: string
          example: user@gmail.com
        password:
          type: string
    Notebook:
      properties:
        title:
          type: string
        content:
            type: string
        categories:
          type: array
          items:
            type: string
    Image:
        properties:
            fileName:
                type: string
            filePath:
                type: string
    Category:
        properties:
            name:
                type: string
    Todo:
        properties:
            task:
                type: string
            Status:
                type: string
                enum: [ 'pending', 'in_progress', 'completed' ]
                default: 'pending'
            dueDate:
                type: string
                format: date
            createdAt:
                type: string
                format: date
    Contact:
        properties:
            firstName:
                type: string
                example: John
            surName:
                type: string
                example: Doe
            emailAddress:
                type: string
                example: doe23@gmail.com
                format: email
            phoneNumber1:
                type: string
                example: +237651833988
            phoneNumber2: 
                type: string
                example: +237682431802
            address:
                type: string
                example: 123 Main St, CityVille, State, 12345, USA
            company:
                type: string
            birthday:
                type: string
                format: date
            jobTitle:
                type: string
            relationship:
                type: string
                enum: ['colleague', 'friend', 'family', 'other' ]
components:
  schemas:
    Contact:
      type: object
      properties:
        firstName: 
          type: string
          example: John
        surName:
          type: string
          example: Doe
        emailAddress:
          type: string
          format: email
          example: john@example.com
        phoneNumber1:
          type: string
          example: +237652894084
        phoneNumber2:
          type: string
          example: +237652894084
        address:
          type: string
          example: 123 Main St, CityVille, State, 12345, USA
        company:
          type: string
        birthday:
          type: string
          format: date
        jobTitle:
          type: string
        relationship:
          type : string
          enum: ['Colleague', 'Friend', 'Family', 'Other']
